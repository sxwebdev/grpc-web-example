// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "example.proto" (package "hello", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * RPC
 *
 * @generated from protobuf message hello.RpcRequest
 */
export interface RpcRequest {
  /**
   * @generated from protobuf field: string text = 1;
   */
  text: string;
}
/**
 * @generated from protobuf message hello.RpcResponse
 */
export interface RpcResponse {
  /**
   * @generated from protobuf field: string response = 1;
   */
  response: string;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp date = 11;
   */
  date?: Timestamp;
}
/**
 * Stream
 *
 * @generated from protobuf message hello.StreamRequest
 */
export interface StreamRequest {}
/**
 * @generated from protobuf message hello.StreamResponse
 */
export interface StreamResponse {
  /**
   * @generated from protobuf field: int32 rand_integer = 1;
   */
  randInteger: number;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp date = 2;
   */
  date?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class RpcRequest$Type extends MessageType<RpcRequest> {
  constructor() {
    super("hello.RpcRequest", [
      { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<RpcRequest>): RpcRequest {
    const message = { text: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<RpcRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: RpcRequest
  ): RpcRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string text */ 1:
          message.text = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: RpcRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string text = 1; */
    if (message.text !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.text);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message hello.RpcRequest
 */
export const RpcRequest = new RpcRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RpcResponse$Type extends MessageType<RpcResponse> {
  constructor() {
    super("hello.RpcResponse", [
      { no: 1, name: "response", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 11, name: "date", kind: "message", T: () => Timestamp },
    ]);
  }
  create(value?: PartialMessage<RpcResponse>): RpcResponse {
    const message = { response: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<RpcResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: RpcResponse
  ): RpcResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string response */ 1:
          message.response = reader.string();
          break;
        case /* google.protobuf.Timestamp date */ 11:
          message.date = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.date
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: RpcResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string response = 1; */
    if (message.response !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.response);
    /* google.protobuf.Timestamp date = 11; */
    if (message.date)
      Timestamp.internalBinaryWrite(
        message.date,
        writer.tag(11, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message hello.RpcResponse
 */
export const RpcResponse = new RpcResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamRequest$Type extends MessageType<StreamRequest> {
  constructor() {
    super("hello.StreamRequest", []);
  }
  create(value?: PartialMessage<StreamRequest>): StreamRequest {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<StreamRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: StreamRequest
  ): StreamRequest {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: StreamRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message hello.StreamRequest
 */
export const StreamRequest = new StreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamResponse$Type extends MessageType<StreamResponse> {
  constructor() {
    super("hello.StreamResponse", [
      {
        no: 1,
        name: "rand_integer",
        kind: "scalar",
        T: 5 /*ScalarType.INT32*/,
      },
      { no: 2, name: "date", kind: "message", T: () => Timestamp },
    ]);
  }
  create(value?: PartialMessage<StreamResponse>): StreamResponse {
    const message = { randInteger: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<StreamResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: StreamResponse
  ): StreamResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 rand_integer */ 1:
          message.randInteger = reader.int32();
          break;
        case /* google.protobuf.Timestamp date */ 2:
          message.date = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.date
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: StreamResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int32 rand_integer = 1; */
    if (message.randInteger !== 0)
      writer.tag(1, WireType.Varint).int32(message.randInteger);
    /* google.protobuf.Timestamp date = 2; */
    if (message.date)
      Timestamp.internalBinaryWrite(
        message.date,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message hello.StreamResponse
 */
export const StreamResponse = new StreamResponse$Type();
/**
 * @generated ServiceType for protobuf service hello.Service
 */
export const Service = new ServiceType("hello.Service", [
  { name: "Rpc", options: {}, I: RpcRequest, O: RpcResponse },
  {
    name: "Stream",
    serverStreaming: true,
    options: {},
    I: StreamRequest,
    O: StreamResponse,
  },
]);
